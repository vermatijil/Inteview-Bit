TreeNode* Solution::flatten(TreeNode* A)
{
    TreeNode *dummy=new TreeNode(-1);
    TreeNode *curr=dummy;
    stack<TreeNode *> st;
    st.push(A);
    while(!st.empty())
    {
        TreeNode *l=st.top()->left;
        TreeNode *r=st.top()->right;
        curr->right=st.top();
        st.pop();
        curr->left=NULL;
        curr=curr->right;
        if(r)
        st.push(r);
        if(l)
        st.push(l);
    }
    return(dummy->right);
}



TreeNode* getAns(TreeNode* root) {
        // base case
        if (root == NULL) {
            return NULL;
        }

        TreeNode* lPart = getAns(root->left);
        TreeNode* rPart = getAns(root->right);

        TreeNode* last = lPart;
        if (last != NULL) {
            while (last->right != NULL) {
                last = last->right;
            }
        }
        if (lPart != NULL) {
            root->left = NULL;
            root->right = lPart;
            last->right = rPart;
        } else {
            root->right = rPart;
        }

        return root;
    }
    void flatten(TreeNode* root)
    {
        TreeNode* ans = getAns(root);
    }
