Given an array A[] which represents a Complete Binary Tree i.e, if index i is the parent, index 2*i + 1 is the left child and index 2*i + 2 is the right child.
The task is to find the minimum number of swaps required to convert it into a Binary Search Tree. 




 private:
//this is a function to get the inorder 
 void getInorder(vector<int>&ans,int index,int n,vector<int>&temp)
 {
     //base condition
     if(index>=n) return;
     
     int leftChild=2*index+1;
     int rightChild=2*index+2;
     getInorder(ans,leftChild,n,temp);
     temp.push_back(ans[index]);
     getInorder(ans,rightChild,n,temp);
 }
 int minSwaps(vector<int>&ans)
    {
	    vector<pair<int,int>>finalAns;
	    for(int i=0;i<ans.size();i++) finalAns.push_back({ans[i],i});
	    sort(finalAns.begin(),finalAns.end());
	    int count=0;
	    for(int i=0;i<ans.size();i++)
	    {
	        if(finalAns[i].second==i) continue;
	        else 
	        {
	            count++;
	            swap(finalAns[i],finalAns[finalAns[i].second]);
	            i--;
	        }
	    }
	    return count;
	}
 public:
    int minSwaps(vector<int>&A, int n)
    {
        vector<int>temp;
        getInorder(A,0,n,temp);
        return minSwaps(temp);
    }

