//this is the implementation of the stack using a queue
//remember this is important


class MyStack {
public:

    queue<int>q1,q2;

    MyStack() {
        
    }
    
    void push(int x)
    {
        while(!q1.empty())
        {
            q2.push(q1.front());
            q1.pop();
        }
        q1.push(x);
        while(!q2.empty())
        {
            q1.push(q2.front());
            q2.pop();
        }
    }

    
    int pop()
    {
        int val=q1.front();
        q1.pop();
        return val;
    }
    
    int top()
    {
        return q1.front();
    }
    bool empty()
    {
        return q1.empty();
    } 
};


//this is the implementation of the queue using a stack


#pragma GCC optimize("O3", "unroll-loops")
class MyQueue {
    stack<int> s0, s1;
    int front=0;
public:
    MyQueue() {
        
    }
    
    void push(int x) {
        if (s0.empty()) front=x;
        s0.push(x);
    }
    
    int pop() {// amortized O(1)
        if (s1.empty()){
            while(!s0.empty()){
                int x=s0.top();
                s0.pop();
                s1.push(x);
            }
        }
        int x=s1.top();
        s1.pop();
        return x;
    }
    
    int peek() {
        if (!s1.empty()){
            return s1.top();
        }
        return front;
    }
    
    bool empty() {
        return s0.empty() && s1.empty();
    }
};
