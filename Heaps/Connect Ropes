Given an array of integers A representing the length of ropes.
You need to connect these ropes into one rope. The cost of connecting two ropes is equal to the sum of their lengths.
Find and return the minimum cost to connect these ropes into one rope.

 Given array A = [1, 2, 3, 4, 5].
 Connect the ropes in the following manner:
 1 + 2 = 3
 3 + 3 = 6
 4 + 5 = 9
 6 + 9 = 15


So, total cost  to connect the ropes into one is 3 + 6 + 9 + 15 = 33.

 Given array A = [5, 17, 100, 11].
 Connect the ropes in the following manner:
 5 + 11 = 16
 16 + 17 = 33
 33 + 100 = 133


So, total cost  to connect the ropes into one is 16 + 33 + 133 = 182.


//this is how we can pop twice from the priority queue
int Solution::solve(vector<int> &A){
    int res = 0;  
    priority_queue<int, vector<int>, greater<int>> p(A.begin(),A.end());
   
    while(p.size() >= 2)
    {
        int temp1 = p.top();
        p.pop();
        int temp2 = p.top();
        res +=  temp1 + temp2;
        p.pop();
        p.push(temp1+temp2);  
    }
    return res;    
}
