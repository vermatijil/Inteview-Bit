//this was asked in facebook and this is an important question


Given an array A of N integers, find the index of values that satisfy P + Q = R + S, where P, Q, R & S are integers values in the array

Expected time complexity O(N2)

NOTE:
1) Return the indices A1 B1 C1 D1, so that 
  A[A1] + A[B1] = A[C1] + A[D1]
  A1 < B1, C1 < D1
  A1 < C1, B1 != D1, B1 != C1 
2) If there are more than one solutions,
   then return the tuple of values which are lexicographical smallest. 

Assume we have two solutions
S1 : A1 B1 C1 D1 ( these are values of indices in the array )
S2 : A2 B2 C2 D2

S1 is lexicographically smaller than S2 if:
  A1 < A2 OR
  A1 = A2 AND B1 < B2 OR
  A1 = A2 AND B1 = B2 AND C1 < C2 OR 
  A1 = A2 AND B1 = B2 AND C1 = C2 AND D1 < D2
If no solution is possible, return an empty list.


//this is a question based on hashing and must do this questions  before interview 


vector<int> Solution::equal(vector <int> & A) {
    unordered_map < int, pair < int, int >> m;
    int n = A.size();
    vector <int> ans{n,n,n,n};
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (m.find(A[i] + A[j]) != m.end()) {
                int x = m[A[i] + A[j]].first, y = m[A[i] + A[j]].second;
                if (x < y && i < j && x < i && y != i && y != j) {
                    vector <int> temp = {x,y,i,j};
                    if(temp<ans) ans=temp;
                }
            }
            else m[A[i] + A[j]] = {i,j};
        }
    }
    if(ans==vector <int> {n,n,n,n}) return {};
    return ans;
}
