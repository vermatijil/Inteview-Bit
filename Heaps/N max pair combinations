class three
{
    public:
        int val,idx,jdx;
};

struct cmp
{
    bool operator()(three a,three b)
    {
        return a.val<b.val;
    }
};

vector<int> Solution::solve(vector<int> &ans, vector<int> &bns)
{
     sort(ans.begin(),ans.end());
    sort(bns.begin(),bns.end());
    int n=ans.size();
    priority_queue<three,vector<three>,cmp>pendingNodes;
    set<pair<int,int>>st;
    vector<int>finalAns;
    st.insert({n-1,n-1});
    pendingNodes.push({ans[n-1]+bns[n-1],n-1,n-1});
    while(finalAns.size()!=n)
    {
        three th=pendingNodes.top();
        pendingNodes.pop();
        int val=th.val;
        int i=th.idx;
        int j=th.jdx;
        finalAns.push_back(val);    
        if(i>0 and st.count({i-1,j})==0)
        {
            pendingNodes.push({ans[i-1]+bns[j],i-1,j});
            st.insert({i-1,j});
        }
        if(j>0 and st.count({i,j-1})==0)
        {
            pendingNodes.push({ans[i]+bns[j-1],i,j-1});
            st.insert({i,j-1});
        }
    }
    return finalAns;
}


//Variaation of the above problem

class three
{
    public:
        int val,idx,jdx;
};

struct cmp
{
    bool operator()(three a,three b)
    {
        return a.val<b.val;
    }
};

vector<int> Solution::solve(vector<int> &ans, vector<int> &bns, int c)
{
     sort(ans.begin(),ans.end());
    sort(bns.begin(),bns.end());
    int n=ans.size();
    priority_queue<three,vector<three>,cmp>pendingNodes;
    set<pair<int,int>>st;
    vector<int>finalAns;
    st.insert({n-1,n-1});
    pendingNodes.push({ans[n-1]+bns[n-1],n-1,n-1});
    while(c--)
    {
        three th=pendingNodes.top();
        pendingNodes.pop();
        int val=th.val;
        int i=th.idx;
        int j=th.jdx;
        finalAns.push_back(val);    
        if(i>0 and st.count({i-1,j})==0)
        {
            pendingNodes.push({ans[i-1]+bns[j],i-1,j});
            st.insert({i-1,j});
        }
        if(j>0 and st.count({i,j-1})==0)
        {
            pendingNodes.push({ans[i]+bns[j-1],i,j-1});
            st.insert({i,j-1});
        }
    }
    return finalAns;
}

