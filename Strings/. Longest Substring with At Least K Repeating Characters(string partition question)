
Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.

if no such substring exists, return 0.

 

Example 1:

Input: s = "aaabb", k = 3
Output: 3
Explanation: The longest substring is "aaa", as 'a' is repeated 3 times.
Example 2:

Input: s = "ababbc", k = 2
Output: 5
Explanation: The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.


//very important question on the string partition 
class Solution {
public:
    int longestSubstring(string s, int k)
    {
        int n=s.size();
        if(n==0 || n<k) return 0;
        if(k==1) return n;

        map<int,int>mp;
        for(auto e:s) mp[e]++;

        int i=0;
        while(i<n and mp[s[i]]>=k) i++;
        if(i==n) return n;
        int left=longestSubstring(s.substr(0,i),k);
        while(i<n and mp[s[i]]<k) i++;
        int right=longestSubstring(s.substr(i),k);
        return max(right,left);
    }
};
