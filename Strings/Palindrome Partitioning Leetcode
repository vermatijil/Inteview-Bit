

Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
Return all possible palindrome partitioning of s.

 


class Solution {
public: 


    bool isPalindrome(string s,int start,int end)
    {
        while(start<=end)
        {
            if(s[start]!=s[end]) return false;
            start++;
            end--; 
        }
        return true;
    }

    void helper(int index,vector<vector<string>>&finalAns,vector<string>&temp,string s)
    {
        if(index==s.size()) 
        {
            finalAns.push_back(temp);
            return;
        }
        for(int i=index;i<s.size();i++)
        {
            if(isPalindrome(s,index,i))
            {
                temp.push_back(s.substr(index,i-index+1));
                helper(i+1,finalAns,temp,s);
                temp.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s)
    {
        vector<vector<string>>finalAns;
        vector<string>temp;
        int index=0;
        helper(index,finalAns,temp,s);
        return finalAns;
    }
};
