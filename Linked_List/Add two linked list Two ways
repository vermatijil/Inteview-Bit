//this is the first way from geeks from geeks
  Node*reverseLinkedList(Node*head)
    {
        if(head==NULL || head->next==NULL) return head;
        Node*temp=head->next;
        Node*small=reverseLinkedList(head->next);
        temp->next=head;
        head->next=NULL;
        return small;
    }
    
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        Node*temp1=reverseLinkedList(first);
        Node*temp2=reverseLinkedList(second);
        Node*dummy=new Node(-1);
        Node*temp=dummy;
        int carry=0;
        while(temp1!=NULL and temp2!=NULL)
        {
            int sum=temp1->data+temp2->data+carry;
            int digit=sum%10;
            carry=sum/10;
            Node*newNode=new Node(digit);
            temp->next=newNode;
            temp=newNode;
            temp1=temp1->next;
            temp2=temp2->next;
        }
        while(temp1!=NULL)
        {
            int sum=temp1->data+carry;
            int digit=sum%10;
            carry=sum/10;
            Node*newNode=new Node(digit);
            temp->next=newNode;
            temp=newNode;
            temp1=temp1->next;
        }
        while(temp2!=NULL)
        {
            int sum=temp2->data+carry;
            int digit=sum%10;
            carry=sum/10;
            Node*newNode=new Node(digit);
            temp->next=newNode;
            temp=newNode;
            temp2=temp2->next;
        }
        if(carry!=0)
        {
            Node*newNode=new Node(carry);
            temp->next=newNode;
            temp=newNode;
        }
        Node*finalLinkedList=reverseLinkedList(dummy->next);
        return finalLinkedList;
    }



//this is the second variation of the problem from leetcode
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)
    {
        ListNode*temp1=l1;
        ListNode*temp2=l2;
        int carry=0;
        ListNode*dummy=new ListNode(-1);
        ListNode*temp=dummy;
        while(temp1!=NULL and temp2!=NULL)
        {
            int sum=temp1->val+temp2->val+carry;
            int digit=sum%10;
            carry=sum/10;
            ListNode*newNode=new ListNode(digit);
            temp->next=newNode;
            temp=newNode;
            temp1=temp1->next;
            temp2=temp2->next;
        }
        while(temp1!=NULL)
        {
            int sum=temp1->val+carry;
            int digit=sum%10;
            carry=sum/10;
            ListNode*newNode=new ListNode(digit);
            temp->next=newNode;
            temp=newNode;
            temp1=temp1->next;
        }
        while(temp2!=NULL)
        {
            int sum=temp2->val+carry;
            int digit=sum%10;
            carry=sum/10;
            ListNode*newNode=new ListNode(digit);
            temp->next=newNode;
            temp=newNode;
            temp2=temp2->next;
        }
        if(carry!=0)
        {
            ListNode*newNode=new ListNode(carry);
            temp->next=newNode;
            temp=newNode;
        }
        return dummy->next;
    }
};


