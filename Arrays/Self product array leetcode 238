
238. Product of Array Except Self
Solved
Medium
Topics
Companies
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]






//this is a prefix and suffix sum

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& ans)
    {
        int n=ans.size();
        vector<int>output;
        int product=1;
        for(int i=0;i<n;i++)
        {
            product=product*ans[i];
            output.push_back(product);
        }
        product=1;
        for(int i=n-1;i>0;i--)
        {
            output[i]=output[i-1]*product;
            product=product*ans[i];
        }
        output[0]=product;
        return output;
    }
};



//this is an alternative solution with the same time complexity but with more space complexity 
#include <bits/stdc++.h>

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int pro = 1 ;
        int n = nums.size() ;
        vector<int> ans(n) ;
        vector<int>left ;
        vector<int> right(n) ;
        for(int i=0 ; i<n ; i++){
            // left[i] = pro*nums[i] ;
            pro = pro*nums[i] ;
            left.push_back(pro) ;
        }
        pro = 1 ;
        for(int i=n-1 ; i>=0 ; i--){
            pro = pro*nums[i] ;
            // right.push_back(pro) ;
            right[i] = pro ;
        }
        ans[0] = right[1] ;
        ans[n-1] = left[n-2] ;
        for(int i=1 ; i<n-1 ; i++) {
            ans[i] = left[i-1]*right[i+1] ;
        }
        return ans ;
    }
};


