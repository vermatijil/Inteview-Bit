Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.



Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]



class Solution {
public:

    void helper(int index,vector<int>&ans,vector<int>&temp,vector<vector<int>>&finalAns,int target)
    {
        if(target==0)
        {
            finalAns.push_back(temp);
            return;
        } 
        for(int i=index;i<ans.size();i++)
        {
            if(i>index and ans[i]==ans[i-1]) continue;
            if(ans[i]>target) break;
            temp.push_back(ans[i]);
            helper(i+1,ans,temp,finalAns,target-ans[i]);
            temp.pop_back();
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& ans, int target)
    {
        sort(ans.begin(),ans.end());
        vector<int>temp;
        vector<vector<int>>finalAns;
        int index=0;
        helper(index,ans,temp,finalAns,target);
        return finalAns;
    }
};
