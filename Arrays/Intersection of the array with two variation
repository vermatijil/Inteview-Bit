this is the first variation of the problem 
Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.




class Solution {
public:
    vector<int> intersection(vector<int>& ans, vector<int>& bns)
    {
        set<int>AnsSet;
        set<int>BnsSet;
        for(auto e:ans) AnsSet.insert(e);
        for(auto e:bns) BnsSet.insert(e);
        vector<int>finalAns;
        for(auto e:AnsSet)
        {
            if(BnsSet.find(e)!=BnsSet.end()) finalAns.push_back(e);
        }
        return finalAns;
    }
};






//this is the second variatio of the problem and this is solved using the maps
class Solution {
public:
 vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int>ans;
        unordered_map<int,int>mp;
        for(auto num: nums1) mp[num]++;
        for(auto num: nums2) 
            if(mp.find(num)!=mp.end() && mp[num]>0){
                ans.push_back(num);
                mp[num]--;
            }
        return ans;
    }
};



//both the appraoch can be asked in a real interview do them properly
