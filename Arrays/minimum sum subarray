Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray
 whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0
 

Constraints:

1 <= target <= 109
1 <= nums.length <= 105
1 <= nums[i] <= 104
 

Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).



//always use sliding window in such types of question practise more of such types of question from geeksforgeeks

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& ans)
    {
        long long i=0;
        long long j=0;
        long long sum=0;
        long long mini=LLONG_MAX;
        int n=ans.size();
        while(j<n)
        {
            if((sum+ans[j])<target)
            {
                sum=sum+ans[j];
                j++;
            }
            else
            {
                mini=min(mini,abs(j-i+1));
                sum=sum-ans[i];
                i++;
            }
        }
        if(mini==LLONG_MAX) return 0;
        return mini;
    }
};



