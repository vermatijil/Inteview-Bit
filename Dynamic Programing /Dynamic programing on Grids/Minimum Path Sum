Problem statement
Ninjaland is a country in the shape of a 2-Dimensional grid 'GRID', with 'N' rows and 'M' columns. Each point in the grid has some cost associated with it.

Find a path from top left i.e. (0, 0) to the bottom right i.e. ('N' - 1, 'M' - 1) which minimizes the sum of the cost of all the numbers along the path. You need to tell the minimum sum of that path.

Note:
You can only move down or right at any point in time.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 100   
1 <= N, M <= 10^2
1 <= GRID[i][j] <= 10^5

Where 'GRID[i][j]' denotes the value of the cell in the matrix.

Time limit: 1 sec
Sample Input 1:
2
2 3
5 9 6
11 5 2
1 1
5
Sample Output 1:
21
5
Explanation For Sample Output 1:
In test case 1, Consider a grid of 2*3:

For this the grid the path with minimum value is (0,0) -> (0,1) -> (1,1) -> (1,2). And the sum along this path is 5 + 9 +5 + 2 = 21. So the ans is 21.

In test case 2, The given grid is:

For this the grid the path with minimum value is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2).The sum along this path is 1 + 2 + 3 + 4 + 9 = 19.
Sample Input 2:
2
2 2
5 6
1 2
3 3
1 2 3
4 5 4
7 5 9
Sample Output 2:
8
19
Explanation For Sample Output 2:
In test case 1, For this the grid the path with minimum value is (0,0) -> (1,0) -> (1,1). The sum along this path is 5 + 1 + 2 = 8.

In test case 2, The given grid is:

For this the grid the path with minimum value is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2).The sum along this path is 1 + 2 + 3 + 4 + 9 = 19.



//this is the recursive approach in the main function 

#include <bits/stdc++.h> 


int helper(int i,int j,vector<vector<int>>&ans)
{
    if(i==0 and j==0) return ans[0][0];
    if(i<0 or j<0) return 1e9;

    int up=helper(i-1,j,ans)+ans[i][j];
    int down=helper(i,j-1,ans)+ans[i][j];
    return min(up,down);
}


int minSumPath(vector<vector<int>> &ans)
{
    int n=ans.size();
    int m=ans[0].size();
    int i=n-1;
    int j=m-1;
    return helper(i,j,ans);
}


//this is the memoization approach

#include <bits/stdc++.h> 


int helper(int i,int j,vector<vector<int>>&ans,vector<vector<int>>&dp)
{
    if(i==0 and j==0) return ans[0][0];
    if(i<0 or j<0) return 1e9;

    if(dp[i][j]!=-1) return dp[i][j];

    int up=helper(i-1,j,ans,dp)+ans[i][j];
    int down=helper(i,j-1,ans,dp)+ans[i][j];
    dp[i][j]=min(up,down);
    return dp[i][j];
}


int minSumPath(vector<vector<int>> &ans)
{
    int n=ans.size();
    int m=ans[0].size();
    int i=n-1;
    int j=m-1;
    vector<vector<int>>dp(i+1,vector<int>(j+1,-1));
    return helper(i,j,ans,dp);
}

//this is the dynamic programming solution
//se how the minimum and maximum are handeled in the do solution and look at the solution of the problem

int minSumPath(vector<vector<int>> &ans)
{
    int n=ans.size();
    int m=ans[0].size();
    int i=n-1;
    int j=m-1;
    vector<vector<int>>dp(i+1,vector<int>(j+1,0));
    for(int i=0;i<=n-1;i++)
    {
        for(int j=0;j<=m-1;j++)
        {
            if(i==0 and j==0 ) dp[i][j]=ans[i][j];
            else
            {
                int up=ans[i][j];
                if(i>0) up=dp[i-1][j]+up;
                else up=1e9;

                int down=ans[i][j];
                if(j>0) down=dp[i][j-1]+down;
                else down=1e9;

                
                dp[i][j]=min(up,down);
            }
        }
    }
    return dp[i][j];
}


