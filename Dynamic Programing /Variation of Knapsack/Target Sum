//this is the variation of the problem count subsets with a given difference please check that out first 
//that is also a difficult concept to understand underatand that first 


#include <bits/stdc++.h> 
#define MOD 1000000007
 int findWays(vector<int>& ans, int sum)
    {
        int n=ans.size();
        int index=n-1;
        vector<vector<int>>dp(index+1,vector<int>(sum+1,0));
        if(ans[0]==0) dp[0][0]=2;
        else dp[0][0]=1;
        if(ans[0]!=0 and ans[0]<=sum)  dp[0][ans[0]]=1;
        for(int i=1;i<=n-1;i++)
        {
            for(int j=0;j<=sum;j++)
            {
                int not_pick=dp[i-1][j];
                int pick=0;
                if(ans[i]<=j) pick=dp[i-1][j-ans[i]];
                dp[i][j]=(pick+not_pick)%MOD;
            }
        }
        return dp[n-1][sum];
    }



    int countPartitions(int n, int d, vector<int> &ans)
    {
        int sum=0;
        for(auto e:ans) sum=sum+e;
        if(sum-d<0 || (sum-d)%2) return false;
        return findWays(ans,(sum-d)/2);
    }


int targetSum(int n, int target, vector<int>& ans)
{
    return countPartitions(n,target,ans);
}
