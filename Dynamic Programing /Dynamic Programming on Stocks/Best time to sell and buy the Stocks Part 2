Problem statement
You have been given stock values/prices for N number of days. Every i-th day signifies the price of a stock on that day. Your task is to find the maximum profit which you can make by buying and selling the stocks.

 Note :
You may make as many transactions as you want but can not have more than one transaction at a time i.e, if you have the stock, you need to sell it first, and then only you can buy it again.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= t <= 10^2
0 <= N <= 10^5
Time Limit: 1 sec
Sample Input 1 :
1
7
1 2 3 4 5 6 7
Sample Output 1 :
6
Explanation :
We can make the maximum profit by buying the stock on the first day and selling it on the last day.
Sample Input 2 :
1
7
7 6 5 4 3 2 1
Sample Output 2 :
0
Explanation :
We can make the maximum profit by not buying the stock.



//this is the recursive solution of the problem

#include<iostream>
#include<vector>

using namespace std;


long helper(long*ans,int buy,int index,int n)
{
    if(index==n) return 0;
    long profit=0;
    if(buy)
        profit=max(-ans[index]+helper(ans,0,index+1,n,dp),helper(ans,1,index+1,n,dp));           
    else
        profit=max(ans[index]+helper(ans,1,index+1,n,dp),helper(ans,0,index+1,n,dp));
     return profit;
} 

long getMaximumProfit(long *ans, int n)
{
    int index=0;
    int buy=1;
    return helper(ans,buy,index,n,dp);
}


//this is the memoization solution of the problem ;

long helper(long*ans,int buy,int index,int n,vector<vector<long>>&dp)
{
    if(index==n) return 0;
    if(dp[index][buy]!=-1) return dp[index][buy];
    long profit=0;
    if(buy)
        profit=max(-ans[index]+helper(ans,0,index+1,n,dp),helper(ans,1,index+1,n,dp));           
    else
        profit=max(ans[index]+helper(ans,1,index+1,n,dp),helper(ans,0,index+1,n,dp));
    return dp[index][buy]=profit;
} 

long getMaximumProfit(long *ans, int n)
{
    int index=0;
    int buy=1;
    vector<vector<long>>dp(n,vector<long>(2,-1));
    return helper(ans,buy,index,n,dp);
}
