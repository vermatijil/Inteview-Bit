//this is the palindromic partitioning 


Given a string str, a partitioning of the string is a palindrome partitioning if every sub-string of the partition is a palindrome. Determine the fewest cuts needed for palindrome partitioning of the given string.

 bool isPalin(int i,int j,string&str)
    {
        while(i<j)
        {
            if(str[i]!=str[j]) return false;
            i++;
            j--;
        }
        return true;
    }
    
    int helper(int i,int n,string&str,vector<int>&dp)
    {
        //this is the base case
        if(i==n) return 0;
        if(dp[i]!=-1) return dp[i];
        int minCost=INT_MAX;
        for(int j=i;j<n;j++)
        {
            if(isPalin(i,j,str))
            {
                int cost=1+helper(j+1,n,str,dp);
                minCost=min(cost,minCost);  
            }
        }
        return dp[i]=minCost;
    }
    public:
    int palindromicPartition(string str)
    {
        int n=str.size();
        vector<int>dp(n,-1);
        return helper(0,n,str,dp)-1;
    }
